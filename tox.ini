[tox]
skipsdist = True
envlist = lint,py39
source_package=dhos_messages_api
all_sources = {[tox]source_package} tests/ integration-tests/

[flake8]
max-line-length = 100

[mypy]
namespace_packages=True
ignore_missing_imports=False
disallow_untyped_defs=True

[mypy-pytest,flask_sqlalchemy,connexion,waitress,environs,sqlalchemy.*,apispec.*,apispec_webframeworks.*,jose]
ignore_missing_imports=True

[mypy-flask_batteries_included,dhos_channel_adapter,dhosredis,kombu_batteries_included,pytest_dhos.*,flask]
ignore_missing_imports=True

[testenv]
envdir = {toxworkdir}/py39
setenv = REDIS_INSTALLED = False
         IGNORE_JWT_VALIDATION = True
         ENVIRONMENT = DEVELOPMENT
         AUTH0_AUDIENCE=https://dev.sensynehealth.com/
         HS_KEY=secret
         PROXY_URL=localhost
         LOG_LEVEL=DEBUG
         LOG_FORMAT=COLOUR
         FLASK_APP={[tox]source_package}/autoapp.py

list_dependencies_command = true

allowlist_externals =
    bandit
    black
    coverage
    isort
    mypy
    poetry
    python
    safety
    true

commands = poetry install -v
           black --check {[tox]source_package} tests/
           isort {[tox]source_package} tests/ --check-only
           mypy --config-file tox.ini {[tox]source_package}
           bandit -r {[tox]source_package} -lll
           safety check
           coverage run --source {[tox]source_package} -m py.test {posargs}
           coverage report
           coverage xml -i -o coverage-reports/coverage.xml


[testenv:lint]
description = Run black, isort, and mypy to clean up source files
commands =
       black {[tox]all_sources}
       isort --profile black {[tox]all_sources}
       mypy --config-file tox.ini {[tox]source_package} tests/

[testenv:debug]
description = Run last failing unit test and invoke debugger on errors
commands =
    pytest --lf --pdb

[testenv:update]
description = Update poetry lock files
commands = poetry update

[testenv:openapi]
description = Recreate API specification (openapi.yaml) from Flask blueprint
commands =
    poetry install
    python -m flask create-openapi {toxinidir}/{[tox]source_package}/openapi/openapi.yaml
setenv = {[testenv]setenv}
    DATABASE_USER=anon
    DATABASE_PASSWORD=password
    DATABASE_NAME=default
    DATABASE_HOST=localhost
    DATABASE_PORT=5432

[testenv:readme]
description = Updates the README file with database diagram and commands. (Requires graphviz `dot` is installed)
requires=sadisplay
commands =
    python docs/make_schema.py
    python docs/make-targets.py README.md
